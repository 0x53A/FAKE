stages:
 - build
 - package
 - test
 - staging
 - prod

do_build:
  stage: build
  image: mono:5.8.0.127
  before_script:
    - apt-get update
    - apt-get install -y libunwind8 libicu52 unzip wget git
    - wget https://github.com/fsharp/FAKE/releases/download/5.0.0-beta024/fake-dotnetcore-ubuntu.14.04-x64.zip -O /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip
    - mkdir fake-dotnetcore
    - unzip /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip -d fake-dotnetcore || echo unzip returned $?
    - chmod +x $PWD/fake-dotnetcore/fake

  variables:
    TERM: "xterm-256color"
    # PATH: $PATH:$PWD/fake-dotnetcore/
    MSBUILDDISABLENODEREUSE: "1"
    BuildInParallel: "false"
  
  script: |
    export PATH=$PATH:$PWD/fake-dotnetcore/
    fake run build.fsx target BuildArtifacts

  artifacts:
    paths:
    - artifacts/

do_tests:
  stage: test
  dependencies:
    - do_build
  image: mono:5.8.0.127
  before_script:
    - apt-get update
    - apt-get install -y libunwind8 libicu52 unzip wget git

  script: |
    unzip artifacts/build-cache.zip
    mkdir fake-bin
    unzip artifacts/fake-dotnetcore-ubuntu.14.04-x64.zip -d fake-bin
    export PATH=$PATH:$PWD/fake-bin/
    export artifactsdirectory=$PWD/artifacts
    fake run build.fsx target RunTests

do_choco_pack:
  stage: package
  dependencies:
    - do_build
  image: docker:1.11
  before_script:
    - apt-get update
    - apt-get install -y libunwind8 libicu52 unzip wget git
    #- wget https://github.com/fsharp/FAKE/releases/download/5.0.0-beta024/fake-dotnetcore-ubuntu.14.04-x64.zip -O /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip
    #- mkdir fake-dotnetcore
    #- unzip /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip -d fake-dotnetcore || echo unzip returned $?
    #- chmod +x $PWD/fake-dotnetcore/fake

  services:
    - docker:dind
  script:
    - docker version
    - unzip artifacts/build-cache.zip
    - mkdir fake-bin
    - unzip artifacts/fake-dotnetcore-ubuntu.14.04-x64.zip -d fake-bin
    - mkdir -p nuget/dotnetcore/Fake.netcore/win7-x86
    - unzip artifacts/fake-dotnetcore-win7-x86.zip -d nuget/dotnetcore/Fake.netcore/win7-x86
    - unzip artifacts/chocolatey-requirements.zip
    - fake-bin/fake build target DotNetCoreCreateChocolateyPackage

    #- docker build -t $CI_REGISTRY_IMAGE:latest .
    # push only for tags
    #- "[[ -z $CI_BUILD_TAG ]] && exit 0"
    #- docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_BUILD_TAG
    #- docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    #- docker push $CI_REGISTRY_IMAGE:$CI_BUILD_TAG

do_staging:
  stage: staging
  image: mono:5.8.0.127
  dependencies:
    - do_build
  before_script:
    - apt-get update
    - apt-get install -y libunwind8 libicu52 unzip wget git
    - wget https://github.com/fsharp/FAKE/releases/download/5.0.0-beta024/fake-dotnetcore-ubuntu.14.04-x64.zip -O /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip
    - mkdir fake-dotnetcore
    - unzip /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip -d fake-dotnetcore || echo unzip returned $?
    - chmod +x $PWD/fake-dotnetcore/fake
  variables:
    TERM: "xterm-256color"
    # PATH: $PATH:$PWD/fake-dotnetcore/
    MSBUILDDISABLENODEREUSE: "1"
    BuildInParallel: "false"
    nugetsource: "https://www.myget.org/F/fake/api/v2/package"
  
  script: |
    export PATH=$PATH:$PWD/fake-dotnetcore/
    fake run build.fsx target DeployGitLab
  only:
   - release/*

  environment:
    name: staging
    url: https://staging.fake.build

do_prod:
  stage: prod
  image: mono:5.8.0.127
  dependencies:
    - do_build
    - do_staging
  before_script:
    - apt-get update
    - apt-get install -y libunwind8 libicu52 unzip wget git
    - wget https://github.com/fsharp/FAKE/releases/download/5.0.0-beta024/fake-dotnetcore-ubuntu.14.04-x64.zip -O /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip
    - mkdir fake-dotnetcore
    - unzip /tmp/fake-dotnetcore-ubuntu.14.04-x64.zip -d fake-dotnetcore || echo unzip returned $?
    - chmod +x $PWD/fake-dotnetcore/fake

  variables:
    TERM: "xterm-256color"
    # PATH: $PATH:$PWD/fake-dotnetcore/
    MSBUILDDISABLENODEREUSE: "1"
    BuildInParallel: "false"
  
  script: |
    export PATH=$PATH:$PWD/fake-dotnetcore/
    fake run build.fsx target FastRelease
  only:
   - release/*
  when: manual

  environment:
    name: production
    url: https://fake.build