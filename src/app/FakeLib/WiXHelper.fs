[<AutoOpen>]
/// Contains tasks to create msi installers using the [WiX toolset](http://wixtoolset.org/)
module Fake.WiXHelper

open System
open System.IO
open System.Collections.Generic
open System.Text.RegularExpressions;

let mutable internal fileCount = 0
let mutable internal dirs = Dictionary()

let dirName dir = 
    match dirs.TryGetValue dir with
    | true, n -> 
        dirs.[dir] <- n + 1
        dir + n.ToString()
    | _ -> 
        dirs.[dir] <- 1
        dir

let mutable internal compRefs = Dictionary()

let compRefName compRef = 
    match compRefs.TryGetValue compRef with
    | true, n -> 
        compRefs.[compRef] <- n + 1
        compRef + n.ToString()
    | _ -> 
        compRefs.[compRef] <- 1
        compRef

let mutable internal comps = Dictionary()

let compName comp = 
    match comps.TryGetValue comp with
    | true, n -> 
        comps.[comp] <- n + 1
        comp + n.ToString()
    | _ -> 
        comps.[comp] <- 1
        comp

/// Creates a WiX File tag from the given FileInfo
let wixFile (fileInfo : FileInfo) = 
    fileCount <- fileCount + 1
    sprintf "<File Id=\"fi_%d\" Name=\"%s\" Source=\"%s\" />" fileCount fileInfo.Name fileInfo.FullName

/// Creates WiX File tags from the given files
let getFilesAsWiXString files = 
    files
    |> Seq.map (fileInfo >> wixFile)
    |> toLines

/// Creates recursive WiX directory and file tags from the given DirectoryInfo
let rec wixDir fileFilter asSubDir (directoryInfo : DirectoryInfo) = 
    let dirs = 
        directoryInfo
        |> subDirectories
        |> Seq.map (wixDir fileFilter true)
        |> toLines
    
    let files = 
        directoryInfo
        |> filesInDir
        |> Seq.filter fileFilter
        |> Seq.map wixFile
        |> toLines
    
    let compo = 
        if files = "" then ""
        else 
            sprintf "<Component Id=\"%s\" Guid=\"%s\">\r\n%s\r\n</Component>\r\n" (compName directoryInfo.Name) 
                (Guid.NewGuid().ToString()) files
    
    if asSubDir then 
        sprintf "<Directory Id=\"%s\" Name=\"%s\">\r\n%s%s\r\n</Directory>\r\n" (dirName directoryInfo.Name) 
            directoryInfo.Name dirs compo
    else sprintf "%s%s" dirs compo

/// Retrieves the file id of the first file in WiXString, which name matches fileRegex
/// ## Parameters
///  - `wiXString` - The directory string which was generated by wixDir
///  - `fileRegex` - Regex which matches the file name
///
/// ## Sample
///     let directoryString = wixDir (fun file -> true) true (DirectoryInfo directoryWithFilesForSetup)
///     let executableFileId = getFileIdFromWiXString directoryString "\S*.exe"
let getFileIdFromWiXString wiXString fileRegex =
    let lines = split '\n' wiXString

    // Filter for lines which have a name tag matching the given regex, pick the first and return its ID
    lines
        |> Seq.filter(fun line -> Regex.IsMatch(line, "Name=\"" + fileRegex + "\""))
        |> Seq.head
        // Substring starts immediately after "Id=" tag and is as long as the given file id
        |> fun f -> f.Substring(f.IndexOf("Id=") + 4, Regex.Match(f, "Id=\"\S*\"").Length - 5)


/// Retrieves all component ids from given WiX directory string
/// ## Parameters
///  - `wiXString` - The directory string which was generated by wixDir
///
/// ## Sample
///     let directoryString = wixDir (fun file -> true) true (DirectoryInfo directoryWithFilesForSetup)
///     let componentIds = getComponentIdsFromWiXString directoryString
let getComponentIdsFromWiXString wiXString =
    let lines = split '\n' wiXString

    // Filter for lines which have a name tag matching the given regex, pick the first and return its ID
    lines
        |> Seq.filter(fun line -> Regex.IsMatch(line, "<Component"))
        |> Seq.map(fun f -> sprintf "<ComponentRef Id=\"%s\" />" (f.Substring(f.IndexOf("Id=") + 4, Regex.Match(f, "Id=\"\S*\"").Length - 5)))
        |> System.String.Concat

/// Creates WiX ComponentRef tags from the given DirectoryInfo
let rec wixComponentRefs (directoryInfo : DirectoryInfo) = 
    let compos = 
        directoryInfo
        |> subDirectories
        |> Seq.map wixComponentRefs
        |> toLines
    if (filesInDir directoryInfo).Length > 0 then 
        sprintf "%s<ComponentRef Id=\"%s\"/>\r\n" compos (compRefName directoryInfo.Name)
    else compos

/// Take a component string and set "neverOverwrite" Tag
/// This is useful for config files, since they are not replaced on upgrade like that
let setComponentsNeverOverwrite (components : string) = 
    components.Replace("<Component", "<Component NeverOverwrite=\"yes\"")

open System

/// WiX parameter type
type WiXParams = 
    { ToolDirectory : string
      TimeOut : TimeSpan
      AdditionalCandleArgs : string list
      AdditionalLightArgs : string list }

/// Contains the WiX default parameters  
let WiXDefaults : WiXParams = 
    { ToolDirectory = currentDirectory @@ "tools" @@ "Wix"
      TimeOut = TimeSpan.FromMinutes 5.0
      AdditionalCandleArgs = [ "-ext WiXNetFxExtension" ]
      AdditionalLightArgs = [ "-ext WiXNetFxExtension"; "-ext WixUIExtension.dll"; "-ext WixUtilExtension.dll" ] }

type YesOrNo = 
    | Yes
    | No
    override y.ToString() =
        match y with
        | Yes -> "yes"
        | No -> "no"

type FeatureDisplay = 
    /// Initially shows the feature collapsed. This is the default value.
    | Collapse
    /// Initially shows the feature expanded.
    | Expand
    /// Prevents the feature from displaying in the user interface.
    | Hidden
    override f.ToString() =
        match f with 
        | Collapse -> "collapse"
        | Expand -> "expand"
        | Hidden -> "hidden"

/// Parameters for creating WiX Feature, use ToString for creating the string xml nodes
type WiXFeature = 
    {
        /// Unique identifier of the feature.
        Id : string

        /// Short string of text identifying the feature. 
        /// This string is listed as an item by the SelectionTree control of the Selection Dialog. 
        Title : string

        /// Sets the install level of this feature. A value of 0 will disable the feature. 
        /// Processing the Condition Table can modify the level value (this is set via the Condition child element).
        /// The default value is "1". 
        Level : int

        /// Longer string of text describing the feature. This localizable string is displayed by the Text Control of the Selection Dialog. 
        Description : string

        ///Determines the initial display of this feature in the feature tree. This attribute's value should be one of the following:
        ///collapse
        ///    Initially shows the feature collapsed. This is the default value.
        ///expand
        ///    Initially shows the feature expanded.
        ///hidden
        ///    Prevents the feature from displaying in the user interface.
        ///<an explicit integer value>
        ///    For advanced users only, it is possible to directly set the integer value of the display value that will appear in the Feature row. 
        Display : FeatureDisplay

        /// Nest sub features or components in here
        InnerContent : string 
    }
    override f.ToString() = "<Feature Id=\"" + f.Id + "\" Title=\"" + f.Title + "\" Level=\"" + f.Level.ToString() + "\" Description=\"" + f.Description + "\" Display=\"" 
                            + f.Display.ToString() + "\" ConfigurableDirectory=\"INSTALLDIR\">" + f.InnerContent + "</Feature>"

/// Default values for creating WiX Feature
let WiXFeatureDefaults =
    {   
        Id = ""
        Title = "Default Feature"
        Level = 1
        Description = "Default Feature"
        Display = FeatureDisplay.Expand
        InnerContent = ""
    }

/// Parameters for WiX Script properties, use ToString for creating the string xml nodes
type WiXScript =
    {
        /// The product code GUID for the product.
        ProductCode : Guid

        /// The descriptive name of the product.
        ProductName : string

        /// Product description
        Description : string

        /// The decimal language ID (LCID) for the product.
        ProductLanguage : string

        /// The product's version string.
        ProductVersion : string

        /// The manufacturer of the product.
        ProductPublisher : string

        /// The upgrade code GUID for the product.
        UpgradeGuid : Guid

        /// You can nest upgrade elements in here
        Upgrade : string

        /// Nest major upgrade elements in here
        MajorUpgrade : string

        /// Nest UIRefs in here
        UIRefs : string

        /// Nest WiXVariables in here
        WiXVariables : string

        /// Nest directories in here
        Directories : string

        /// Build Number of product
        BuildNumber : string

        /// You can nest feature elements in here
        Features : string

        /// You can nest custom actions in here
        CustomActions : string

        /// You can nest InstallExecuteSequence actions in here
        ActionSequences : string
    }

/// Default values for WiX Script properties
let WiXScriptDefaults = 
    {
        ProductCode = Guid.Empty
        ProductName = ""
        Description = ""
        ProductLanguage = ""
        ProductVersion = ""
        ProductPublisher = ""
        UpgradeGuid = Guid.Empty
        Upgrade = ""
        MajorUpgrade = ""
        UIRefs = ""
        WiXVariables = ""
        Directories = ""
        BuildNumber = "1.0.0"
        Features = ""
        CustomActions = ""
        ActionSequences = ""
    }

type CustomActionExecute = 
    /// Indicates that the custom action will run after successful completion of the installation script (at the end of the installation). 
    | Commit
    /// Indicates that the custom action runs in-script (possibly with elevated privileges). 
    | Deferred
    /// Indicates that the custom action will only run in the first sequence that runs it. 
    | FirstSequence
    /// Indicates that the custom action will run during normal processing time with user privileges. This is the default. 
    | Immediate
    /// Indicates that the custom action will only run in the first sequence that runs it in the same process. 
    | OncePerProcess
    /// Indicates that a custom action will run in the rollback sequence when a failure occurs during installation, usually to undo changes made by a deferred custom action. 
    | Rollback
    /// Indicates that a custom action should be run a second time if it was previously run in an earlier sequence. 
    | SecondSequence
    override c.ToString() =
        match c with 
        | Commit -> "commit"
        | Deferred -> "deferred"
        | FirstSequence -> "firstSequence"
        | Immediate -> "immediate"
        | OncePerProcess -> "oncePerProcess"
        | Rollback -> "rollback"
        | SecondSequence -> "secondSequence"

type CustomActionReturn = 
    /// Indicates that the custom action will run asyncronously and execution may continue after the installer terminates. 
    | AsyncNoWait
    /// Indicates that the custom action will run asynchronously but the installer will wait for the return code at sequence end. 
    | AsyncWait
    /// Indicates that the custom action will run synchronously and the return code will be checked for success. This is the default. 
    | Check
    /// Indicates that the custom action will run synchronously and the return code will not be checked. 
    | Ignore
    override c.ToString() =
        match c with
        | AsyncNoWait -> "asyncNoWait"
        | AsyncWait -> "asyncWait"
        | Check -> "check"
        | Ignore -> "ignore"

/// Parameters for WiX custom action, use ToString for creating the string xml nodes
type WiXCustomAction = 
    {
        ///	The identifier of the custom action. 
        Id : string

        /// This attribute specifies a reference to a File element with matching Id attribute that will execute the custom action code 
        /// in the file after the file is installed. This attribute is typically used with the ExeCommand attribute to specify 
        /// a type 18 custom action that runs an installed executable, with the DllEntry attribute to specify an installed custom action 
        /// DLL to use for a type 17 custom action, or with the VBScriptCall or JScriptCall attributes to specify a type 21 or 22 custom action. 
        FileKey : string

        /// This attribute indicates the scheduling of the custom action.
        Execute : CustomActionExecute
        /// This attribute specifies whether the Windows Installer, which executes as LocalSystem, should impersonate the user context of 
        /// the installing user when executing this custom action. Typically the value should be 'yes', except when the custom action needs 
        /// elevated privileges to apply changes to the machine. 
        Impersonate : YesOrNo
        /// This attribute specifies the command line parameters to supply to an externally run executable. 
        /// This attribute is typically used with the BinaryKey attribute for a type 2 custom action, the FileKey attribute for a type 18 
        /// custom action, the Property attribute for a type 50 custom action, or the Directory attribute for a type 34 custom action that 
        /// specify the executable to run. 
        ExeCommand : string
        /// Set this attribute to set the return behavior of the custom action. 
        Return : CustomActionReturn
    } 
    override w.ToString() = "<CustomAction Id=\"" + w.Id + "\" FileKey=\"" + w.FileKey + "\" Execute=\"" + w.Execute.ToString() + "\" Impersonate=\"" + w.Impersonate.ToString() + "\" ExeCommand=\""
                            + w.ExeCommand + "\" Return=\"" + w.Return.ToString() + "\" />"

/// Default values for WiX custom actions
let WiXCustomActionDefaults = 
    {
        Id = ""
        FileKey = ""
        Execute = CustomActionExecute.Immediate
        Impersonate = YesOrNo.Yes
        ExeCommand = ""
        Return = CustomActionReturn.Check
    }

type ActionExecutionVerb = 
    /// Specifies that action should be executed after some standard or custom action
    | After
    /// Specifies that action should be executed before some standard or custom action
    | Before
    override a.ToString() =
        match a with
        | After -> "After"
        | Before -> "Before"

/// Parameters for WiX Custom Action executions (In InstallExecuteSequence), use ToString for creating the string xml nodes
type WiXCustomActionExecution = 
    {
        /// The action to which the Custom element applies.
        ActionId : string
        /// Specify if action should be executed before or after target action
        Verb : ActionExecutionVerb
        /// Name of the standard or custom action that the verb points to
        Target : string
        /// Conditions that have to be fulfilled for running execution
        Condition : string
    }
    override w.ToString() = "<Custom Action=\"" + w.ActionId + "\" " + w.Verb.ToString() + "=\"" + w.Target + "\"> " + w.Condition + " </Custom>"

/// Default values for WiX custom action executions
let WixCustomActionExecutionDefaults = 
    {
        ActionId = ""
        Verb = ActionExecutionVerb.After
        Target = ""
        Condition = ""
    }

/// Parameters for WiX UI Reference, use ToString for creating the string xml nodes
type WiXUIRef = 
    {   
        /// Name of referenced UI
        Id : string
    }
    override w.ToString() = "<UIRef Id=\"" + w.Id + "\" />"

/// Default value for WiX UI Reference (WixUI_Minimal)
let WiXUIRefDefaults = 
    {
        Id = "WixUI_Minimal"
    }

/// Parameters for WiX Variable, use ToString for creating the string xml nodes
type WiXVariable = 
    {
        /// The name of the variable.
        Id : string
        /// Set this value to 'yes' in order to make the variable's value overridable either by another WixVariable entry or via the command-line option -d<name>=<value> for light.exe.
        /// If the same variable is declared overridable in multiple places it will cause an error (since WiX won't know which value is correct). The default value is 'no'. 
        Overridable : YesOrNo
        /// The value of the variable. The value cannot be an empty string because that would make it possible to accidentally set a column to null. 
        Value : string
    }
    override w.ToString() = "<WixVariable Id=\"" + w.Id + "\" Value=\"" + w.Value + "\" Overridable=\"" + w.Overridable.ToString() + "\"/>"

/// Default value for WiX Variable
let WiXVariableDefaults = 
    {
        Id = ""
        Overridable = YesOrNo.No
        Value = ""
    }

/// Parameters for WiX Upgrade
type WiXUpgrade =
    {
        /// This value specifies the upgrade code for the products that are to be detected by the FindRelatedProducts action.
        Id: Guid
        /// You can nest WiXUpgradeVersion sequences in here
        UpgradeVersion: string
    }
    override w.ToString() = "<Upgrade Id=\"" + w.Id.ToString("D") + "\">" + w.UpgradeVersion + "</Upgrade>"

/// Default value for WiX Upgrade
let WiXUpgradeDefaults = 
    {
        Id = Guid.Empty
        UpgradeVersion = ""
    }

/// Parameters for WiX Upgrade Version
type WiXUpgradeVersion =
    {
        /// Set to "yes" to detect products and applications but do not uninstall.
        OnlyDetect : YesOrNo
        /// Specifies the lower bound on the range of product versions to be detected by FindRelatedProducts.
        Minimum : string
        /// Specifies the upper boundary of the range of product versions detected by FindRelatedProducts.
        Maximum : string
        /// When the FindRelatedProducts action detects a related product installed on the system, it appends the product code to the property specified in this field. 
        /// Windows Installer documentation for the Upgrade table states that the property specified in this field must be a public property and must be added to the 
        /// SecureCustomProperties property. WiX automatically appends the property specified in this field to the SecureCustomProperties property when creating an MSI. 
        /// Each UpgradeVersion must have a unique Property value. After the FindRelatedProducts action is run, the value of this property is a list of product codes,
        /// separated by semicolons (;), detected on the system.
        Property : string
        /// Set to "no" to make the range of versions detected exclude the value specified in Minimum. This attribute is "yes" by default.
        IncludeMinimum : YesOrNo
        /// Set to "yes" to make the range of versions detected include the value specified in Maximum.
        IncludeMaximum : YesOrNo
    }
    override w.ToString() = "<UpgradeVersion Minimum=\"" + w.Minimum + "\" OnlyDetect=\"" + w.OnlyDetect.ToString() + "\" IncludeMinimum=\"" + w.IncludeMinimum.ToString() + "\" Maximum=\"" + w.Maximum 
                            + "\" IncludeMaximum=\"" + w.IncludeMaximum.ToString() + "\" Property=\"" + w.Property + "\" />"

/// Default value for WiX Upgrade
let WiXUpgradeVersionDefaults = 
    {
        OnlyDetect = YesOrNo.No
        Minimum = ""
        Maximum = ""
        Property = ""
        IncludeMinimum = YesOrNo.Yes
        IncludeMaximum = YesOrNo.No
    }

type MajorUpgradeSchedule =
    /// (Default) Schedules RemoveExistingProducts after the InstallValidate standard action. This scheduling removes the installed product entirely before installing the upgrade product. 
    /// It's slowest but gives the most flexibility in changing components and features in the upgrade product. Note that if the installation of the upgrade product fails, 
    /// the machine will have neither version installed. 
    | AfterInstallValidate
    /// Schedules RemoveExistingProducts after the InstallInitialize standard action. This is similar to the afterInstallValidate scheduling, but if the installation of the upgrade product fails, 
    /// Windows Installer also rolls back the removal of the installed product -- in other words, reinstalls it. 
    | AfterInstallInitialize
    /// Schedules RemoveExistingProducts between the InstallExecute and InstallFinalize standard actions. This scheduling installs the upgrade product "on top of" the installed product then lets 
    /// RemoveExistingProducts uninstall any components that don't also exist in the upgrade product. Note that this scheduling requires strict adherence to the component rules because it relies 
    /// on component reference counts to be accurate during installation of the upgrade product and removal of the installed product. For more information, see Bob Arnson's blog post 
    /// "Paying for Upgrades" for details. If installation of the upgrade product fails, Windows Installer also rolls back the removal of the installed product -- in other words, reinstalls it. 
    | AfterInstallExecute
    /// Schedules RemoveExistingProducts between the InstallExecuteAgain and InstallFinalize standard actions. 
    /// This is identical to the afterInstallExecute scheduling but after the InstallExecuteAgain standard action instead of InstallExecute. 
    | AfterInstallExecuteAgain
    /// Schedules RemoveExistingProducts after the InstallFinalize standard action. This is similar to the afterInstallExecute and afterInstallExecuteAgain schedulings but takes place outside 
    /// the installation transaction so if installation of the upgrade product fails, Windows Installer does not roll back the removal of the installed product, 
    /// so the machine will have both versions installed. 
    | AfterInstallFinalize
    override m.ToString() =
        match m with
        | AfterInstallValidate -> "afterInstallValidate"
        | AfterInstallInitialize -> "afterInstallInitialize"
        | AfterInstallExecute -> "afterInstallExecute"
        | AfterInstallExecuteAgain -> "afterInstallExecuteAgain"
        | AfterInstallFinalize -> "afterInstallFinalize"

/// Parameters for WiX Major Upgrade
type WiXMajorUpgrade = 
    {
        /// Determines the scheduling of the RemoveExistingProducts standard action, which is when the installed product is removed. The default is "afterInstallValidate" which removes the 
        /// installed product entirely before installing the upgrade product. It's slowest but gives the most flexibility in changing components and features in the upgrade product.
        Schedule : MajorUpgradeSchedule
        /// When set to no (the default), products with lower version numbers are blocked from installing when a product with a higher version is installed; the DowngradeErrorMessage 
        /// attribute must also be specified. When set to yes, any version can be installed over any other version. 	 
        AllowDowngrades : YesOrNo
        /// The message displayed if users try to install a product with a lower version number when a product with a higher version is installed. Used only when AllowDowngrades is no (the default). 
        DowngradeErrorMessage : string
    }
    override w.ToString() = "<MajorUpgrade Schedule=\"" + w.Schedule.ToString() + "\" AllowDowngrades=\"" + w.AllowDowngrades.ToString() + "\" DowngradeErrorMessage=\"" + w.DowngradeErrorMessage + "\" />"

/// Default value for WiX Major Upgrade
let WiXMajorUpgradeDefaults =
    {
        Schedule = MajorUpgradeSchedule.AfterInstallValidate
        AllowDowngrades = YesOrNo.No
        DowngradeErrorMessage = "You can't downgrade this product!"
    }

/// Generates WiX Template with specified file name (you can prepend location too)
/// You need to run this once every build an then use FillInWiXScript to replace placeholders
/// ## Parameters
///  - `fileName` - Pass desired fileName for your wiXScript file
/// ## Sample
///     generateWiXScript "Setup.wxs"
let generateWiXScript fileName =
    let scriptTemplate = 
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
        <Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">
          <!-- Values will be set by build script, use processTemplates function. UpgradeGuid may never change -->
            
          <!-- Version uses Major.Minor.Build format -->
          <Product
            Id=\"@Product.ProductCode@\"
            Name=\"@Product.ProductName@\"
            Language=\"@Product.Language@\"
            Version=\"@Product.Version@\"
            Manufacturer=\"@Product.Publisher@\"
            UpgradeCode=\"@Product.UpgradeGuid@\"
            >
            
            <!-- Auto Increment Package Id for every release -->
            <Package
              Id=\"*\"
              InstallerVersion=\"200\"
              Compressed=\"yes\"
              Description=\"@Product.Description@\"
              Manufacturer=\"@Product.Publisher@\"
            />

            <!-- Include user interface -->
            @Product.UIRefs@

            <!-- Add various WiXVariables -->
            @Product.Variables@

            <!-- WiX uses media for splitting up files if using CDs for publishing. We make just one. All files will be embedded in it. -->
            <Media Id=\"1\" Cabinet=\"media1.cab\" EmbedCab=\"yes\" />

            <Directory Id=\"TARGETDIR\" Name=\"SourceDir\">
              <Directory Id=\"ProgramFilesFolder\" Name=\"ProgramFiles\">
                <Directory Id=\"PUBLISHERDIR\" Name=\"@Product.Publisher@\">
                  <Directory Id=\"INSTALLDIR\" Name=\"@Product.ProductName@\">
                    @Product.Directories@
                  </Directory>
                </Directory>
              </Directory>
            </Directory>

            @Product.Features@
        
            @Product.MajorUpgrade@

            @Product.Upgrade@

            @Product.CustomActions@

            <InstallExecuteSequence>
              @Product.ActionSequences@
            </InstallExecuteSequence>
          </Product>
        </Wix>"
    WriteStringToFile false fileName scriptTemplate
    
/// Takes path where script files reside and sets all parameters as defined
/// ## Parameters
///  - `wiXPath` - Pass path where your script is located at. Function will search for all Scripts in that location and fill in parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
/// FillInWixScript "" (fun f ->
///                            {f with
///                                ProductCode = WiXProductCode
///                                ProductName = WiXProductName
///                                Description = projectDescription
///                                ProductLanguage = WiXProductLanguage
///                                ProductVersion = WiXProductVersion
///                                ProductPublisher = WixProductPublisher
///                                UpgradeGuid = WixProductUpgradeGuid
///                                UIRefs = uiRef1.ToString() + uiRef2.ToString()
///                                WiXVariables = wiXLicense.ToString()
///                                Directories = directories
///                                BuildNumber = "1.0.0"
///                                Features = rootFeature.ToString()
///                                CustomActions = action1.ToString() + action2.ToString()
///                                ActionSequences = actionExecution1.ToString() + actionExecution2.ToString()
///                            })
let FillInWixScript wiXPath setParams =
    let parameters = WiXScriptDefaults |> setParams
    let wixScript = !!("*.wxs" @@ wiXPath)
    let replacements = [
        "@Product.ProductCode@", parameters.ProductCode.ToString("D")
        "@Product.ProductName@", parameters.ProductName
        "@Product.Description@", parameters.Description
        "@Product.UIRefs@", parameters.UIRefs
        "@Product.Language@", parameters.ProductLanguage
        "@Product.Version@", parameters.ProductVersion
        "@Product.Variables@", parameters.WiXVariables
        "@Product.Publisher@", parameters.ProductPublisher
        "@Product.UpgradeGuid@", parameters.UpgradeGuid.ToString("D")
        "@Product.Upgrade@", parameters.Upgrade
        "@Product.MajorUpgrade@", parameters.MajorUpgrade
        "@Product.Directories@", parameters.Directories
        "@Product.Features@", parameters.Features
        "@Product.CustomActions@", parameters.CustomActions
        "@Product.ActionSequences@", parameters.ActionSequences
        "@Build.number@", parameters.BuildNumber]
    processTemplates replacements wixScript
    
/// Generates a feature based on the given parameters, use toString on it when embedding it
/// You can pass other features into InnerContent for making a hierarchy
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let feature = generateFeature (fun f -> 
///                                        {f with  
///                                            Id = "UniqueName"
///                                            Title = "Title which is shown"
///                                            Level = 1 
///                                            Description = "Somewhat longer description" 
///                                            Display = "expand" 
///                                            InnerContent = otherFeature.ToString()
///                                        })
let generateFeature setParams =
    let parameters : WiXFeature = WiXFeatureDefaults |> setParams
    if parameters.Id = "" then 
        failwith "No parameter passed for feature Id!"
    parameters

/// Generates a customAction based on the given parameters, use toString on it when embedding it
/// Be careful to make Id unique. FileKey is a reference to a file Id which you added by using wixDir or wixFile
/// Set impersonate to no if your action needs elevated privileges, you should then also set execute as "deferred"
/// ExeCommand are the parameters passed to your executable
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let action = generateCustomAction (fun f ->
///                                            {f with
///                                                Id = "UniqueActionId"
///                                                FileKey = "fi_5"
///                                                Execute = "deferred"
///                                                Impersonate = "no"
///                                                ExeCommand = "install"
///                                                Return = "check"
///                                            })
let generateCustomAction setParams =
    let parameters : WiXCustomAction = WiXCustomActionDefaults |> setParams
    if parameters.Id = "" then 
        failwith "No parameter passed for feature Id!"
    parameters

/// Generates a custom action execution based on the given parameters, use toString on it when embedding it
/// Condition in sample makes execute only on install
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let actionExecution = generateCustomActionExecution (fun f ->
///                                                                {f with 
///                                                                    ActionId = action.Id
///                                                                    Verb = "After"
///                                                                    Target = "InstallFiles"                                                                        
///                                                                    Condition = "<![CDATA[(&" + feature.Id + " = 3) AND NOT (!" + feature.Id + " = 3)]]>"
///                                                                })
let generateCustomActionExecution setParams =
    let parameters : WiXCustomActionExecution = WixCustomActionExecutionDefaults |> setParams
    if parameters.ActionId = "" then 
        failwith "No parameter passed for action Id!"
    parameters

/// Generates a ui ref based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let UIRef = generateUIRef (fun f ->
///                                    {f with
///                                        Id = "WixUI_Mondo"
///                                    })
let generateUIRef setParams =
    let parameters : WiXUIRef = WiXUIRefDefaults |> setParams
    if parameters.Id = "" then 
        failwith "No parameter passed for action Id!"
    parameters


/// Generates an upgrade based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let upgrade = generateUpgrade (fun f ->
///                                       {f with
///                                          Id = productUpgradeCode
///                                       })
let generateUpgrade setParams =
    let parameters : WiXUpgrade = WiXUpgradeDefaults |> setParams
    if parameters.Id = Guid.Empty then 
        failwith "No parameter passed for action Id!"
    parameters

/// Generates an upgrade version based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let upgradeVersion = generateUpgradeVersion (fun f ->
///                                                     {f with
///                                                        Minimum = productVersion
///                                                        OnlyDetect = "yes"
///                                                     })
let generateUpgradeVersion setParams =
    let parameters : WiXUpgradeVersion = WiXUpgradeVersionDefaults |> setParams
    parameters


/// Generates a major upgrade based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let majorUpgradeVersion = generateMajorUpgradeVersion(fun f ->
///                                                     {f with 
///                                                         DowngradeErrorMessage = "A later version is already installed, exiting."
///                                                     })
let generateMajorUpgradeVersion setParams =
    let parameters : WiXMajorUpgrade = WiXMajorUpgradeDefaults |> setParams
    parameters

/// Runs the [Candle tool](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) on the given WiX script with the given parameters
let Candle (parameters : WiXParams) wixScript = 
    traceStartTask "Candle" wixScript
    let fi = fileInfo wixScript
    let wixObj = fi.Directory.FullName @@ sprintf @"%s.wixobj" fi.Name
    let tool = parameters.ToolDirectory @@ "candle.exe"
    let args = 
        sprintf "-out \"%s\" \"%s\" %s" wixObj (wixScript |> FullName) (separated " " parameters.AdditionalCandleArgs)
    tracefn "%s %s" parameters.ToolDirectory args
    if 0 <> ExecProcess (fun info -> 
                info.FileName <- tool
                info.WorkingDirectory <- null
                info.Arguments <- args) parameters.TimeOut
    then failwithf "Candle %s failed." args
    traceEndTask "Candle" wixScript
    wixObj

/// Runs the [Light tool](http://wixtoolset.org/documentation/manual/v3/overview/light.html) on the given WiX script with the given parameters
let Light (parameters : WiXParams) outputFile wixObj = 
    traceStartTask "Light" wixObj
    let tool = parameters.ToolDirectory @@ "light.exe"
    let args = 
        sprintf "\"%s\" -spdb -dcl:high -out \"%s\" %s" (wixObj |> FullName) (outputFile |> FullName) 
            (separated " " parameters.AdditionalLightArgs)
    tracefn "%s %s" parameters.ToolDirectory args
    if 0 <> ExecProcess (fun info -> 
                info.FileName <- tool
                info.WorkingDirectory <- null
                info.Arguments <- args) parameters.TimeOut
    then failwithf "Light %s failed." args
    traceEndTask "Light" wixObj

/// Uses the WiX tools [Candle](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) and [Light](http://wixtoolset.org/documentation/manual/v3/overview/light.html) to create an msi.
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
///  - `outputFile` - The msi output file path (given to Light).
///  - `wixScript` - The path to a WiX script that will be used with Candle.
///
/// ## Sample
///     Target "BuildSetup" (fun _ ->
///         // Copy all important files to the deploy directory
///         !! (buildDir + "/**/*.dll")
///           ++ (buildDir + "/**/*.exe")
///           ++ (buildDir + "/**/*.config")
///           |> Copy deployPrepDir 
///    
///         // replace tags in a template file in order to generate a WiX script
///         let ALLFILES = fun _ -> true
///     
///         let replacements = [
///             "@build.number@",if not isLocalBuild then buildVersion else "0.1.0.0"
///             "@product.productcode@",System.Guid.NewGuid().ToString()
///             "@HelpFiles@",getFilesAsWiXString helpFiles
///             "@ScriptFiles@",getFilesAsWiXString scriptFiles
///             "@icons@",wixDir ALLFILES true (directoryInfo(bundledDir @@ "icons"))]
///         
///         processTemplates replacements setupFiles
///     
///         // run the WiX tools
///         WiX (fun p -> {p with ToolDirectory = WiXPath}) 
///             setupFileName
///             (setupBuildDir + "Setup.wxs.template")
///     )
let WiX setParams outputFile wixScript = 
    let parameters = setParams WiXDefaults
    wixScript
    |> Candle parameters
    |> Light parameters outputFile
