[<AutoOpen>]
/// Contains tasks to create msi installers using the [WiX toolset](http://wixtoolset.org/)
module Fake.WiXHelper

open System
open System.IO
open System.Collections.Generic
open System.Text.RegularExpressions;

let mutable internal fileCount = 0
let mutable internal dirs = Dictionary()

let dirName dir = 
    match dirs.TryGetValue dir with
    | true, n -> 
        dirs.[dir] <- n + 1
        dir + n.ToString()
    | _ -> 
        dirs.[dir] <- 1
        dir

let mutable internal compRefs = Dictionary()

let compRefName compRef = 
    match compRefs.TryGetValue compRef with
    | true, n -> 
        compRefs.[compRef] <- n + 1
        compRef + n.ToString()
    | _ -> 
        compRefs.[compRef] <- 1
        compRef

let mutable internal comps = Dictionary()

let compName comp = 
    match comps.TryGetValue comp with
    | true, n -> 
        comps.[comp] <- n + 1
        comp + n.ToString()
    | _ -> 
        comps.[comp] <- 1
        comp

/// Creates a WiX File tag from the given FileInfo
let wixFile (fileInfo : FileInfo) = 
    fileCount <- fileCount + 1
    sprintf "<File Id=\"fi_%d\" Name=\"%s\" Source=\"%s\" />" fileCount fileInfo.Name fileInfo.FullName

/// Creates WiX File tags from the given files
let getFilesAsWiXString files = 
    files
    |> Seq.map (fileInfo >> wixFile)
    |> toLines

/// Creates recursive WiX directory and file tags from the given DirectoryInfo
let rec wixDir fileFilter asSubDir (directoryInfo : DirectoryInfo) = 
    let dirs = 
        directoryInfo
        |> subDirectories
        |> Seq.map (wixDir fileFilter true)
        |> toLines
    
    let files = 
        directoryInfo
        |> filesInDir
        |> Seq.filter fileFilter
        |> Seq.map wixFile
        |> toLines
    
    let compo = 
        if files = "" then ""
        else 
            sprintf "<Component Id=\"%s\" Guid=\"%s\">\r\n%s\r\n</Component>\r\n" (compName directoryInfo.Name) 
                (Guid.NewGuid().ToString()) files
    
    if asSubDir then 
        sprintf "<Directory Id=\"%s\" Name=\"%s\">\r\n%s%s\r\n</Directory>\r\n" (dirName directoryInfo.Name) 
            directoryInfo.Name dirs compo
    else sprintf "%s%s" dirs compo

/// Retrieves the file id of the first file in WiXString, which name matches fileRegex
/// ## Parameters
///  - `wiXString` - The directory string which was generated by wixDir
///  - `fileRegex` - Regex which matches the file name
///
/// ## Sample
///     let directoryString = wixDir (fun file -> true) true (DirectoryInfo directoryWithFilesForSetup)
///     let executableFileId = getFileIdFromWiXString directoryString "\S*.exe"
let getFileIdFromWiXString wiXString fileRegex =
    let lines = split '\n' wiXString

    // Filter for lines which have a name tag matching the given regex, pick the first and return its ID
    lines
        |> Seq.filter(fun line -> Regex.IsMatch(line, "Name=\"" + fileRegex + "\""))
        |> Seq.head
        // Substring starts immediately after "Id=" tag and is as long as the given file id
        |> fun f -> f.Substring(f.IndexOf("Id=") + 4, Regex.Match(f, "Id=\"\S*\"").Length - 5)

/// Creates WiX ComponentRef tags from the given DirectoryInfo
let rec wixComponentRefs (directoryInfo : DirectoryInfo) = 
    let compos = 
        directoryInfo
        |> subDirectories
        |> Seq.map wixComponentRefs
        |> toLines
    if (filesInDir directoryInfo).Length > 0 then 
        sprintf "%s<ComponentRef Id=\"%s\"/>\r\n" compos (compRefName directoryInfo.Name)
    else compos

open System

/// WiX parameter type
type WiXParams = 
    { ToolDirectory : string
      TimeOut : TimeSpan
      AdditionalCandleArgs : string list
      AdditionalLightArgs : string list }

/// Contains the WiX default parameters  
let WiXDefaults : WiXParams = 
    { ToolDirectory = currentDirectory @@ "tools" @@ "Wix"
      TimeOut = TimeSpan.FromMinutes 5.0
      AdditionalCandleArgs = [ "-ext WiXNetFxExtension" ]
      AdditionalLightArgs = [ "-ext WiXNetFxExtension"; "-ext WixUIExtension.dll"; "-ext WixUtilExtension.dll" ] }

/// Parameters for creating WiX Feature, use ToString for creating the string xml nodes
type WiXFeatureParams = 
    {
        Id : string
        Title : string
        Level : int
        Description : string
        Display : string
        InnerContent : string 
    }
    override f.ToString() = "<Feature Id=\"" + f.Id + "\" Title=\"" + f.Title + "\" Level=\"" + f.Level.ToString() + "\" Description=\"" + f.Description + "\" Display=\"" 
                            + f.Display + "\" ConfigurableDirectory=\"INSTALLDIR\">" + f.InnerContent + "</Feature>"

/// Default values for creating WiX Feature
let WiXFeatureDefaults =
    {   
        Id = ""
        Title = "Default Feature"
        Level = 1
        Description = "Default Feature"
        Display = "expand"
        InnerContent = ""
    }

/// Parameters for WiX Script properties, use ToString for creating the string xml nodes
type WiXScriptParams =
    {
        ProductCode : Guid
        ProductName : string
        Description : string
        ProductLanguage : string
        ProductVersion : string
        ProductPublisher : string
        UpgradeGuid : Guid
        Upgrade : string
        MajorUpgrade : string
        UIRefs : string
        WiXVariables : string
        Directories : string
        BuildNumber : string
        Features : string
        CustomActions : string
        ActionSequences : string
    }

/// Default values for WiX Script properties
let WiXScriptDefaults = 
    {
        ProductCode = Guid.Empty
        ProductName = ""
        Description = ""
        ProductLanguage = ""
        ProductVersion = ""
        ProductPublisher = ""
        UpgradeGuid = Guid.Empty
        Upgrade = ""
        MajorUpgrade = ""
        UIRefs = ""
        WiXVariables = ""
        Directories = ""
        BuildNumber = "1.0.0"
        Features = ""
        CustomActions = ""
        ActionSequences = ""
    }

/// Parameters for WiX custom action, use ToString for creating the string xml nodes
type WiXCustomAction = 
    {
        Id : string
        FileKey : string
        Execute : string
        Impersonate : string
        ExeCommand : string
        Return : string
    } 
    override w.ToString() = "<CustomAction Id=\"" + w.Id + "\" FileKey=\"" + w.FileKey + "\" Execute=\"" + w.Execute + "\" Impersonate=\"" + w.Impersonate + "\" ExeCommand=\""
                            + w.ExeCommand + "\" Return=\"" + w.Return + "\" />"

/// Default values for WiX custom actions
let WiXCustomActionDefaults = 
    {
        Id = ""
        FileKey = ""
        Execute = ""
        Impersonate = ""
        ExeCommand = ""
        Return = ""
    }

/// Parameters for WiX Custom Action executions (In InstallExecuteSequence), use ToString for creating the string xml nodes
type WiXCustomActionExecution = 
    {
        ActionId : string
        Verb : string
        Target : string
        Condition : string
    }
    override w.ToString() = "<Custom Action=\"" + w.ActionId + "\" " + w.Verb + "=\"" + w.Target + "\"> " + w.Condition + " </Custom>"

/// Default values for WiX custom action executions
let WixCustomActionExecutionDefaults = 
    {
        ActionId = ""
        Verb = ""
        Target = ""
        Condition = ""
    }

/// Parameters for WiX UI Reference, use ToString for creating the string xml nodes
type WiXUIRef = 
    {
        Id : string
    }
    override w.ToString() = "<UIRef Id=\"" + w.Id + "\" />"

/// Default value for WiX UI Reference (WixUI_Minimal)
let WiXUIRefDefaults = 
    {
        Id = "WixUI_Minimal"
    }

/// Parameters for WiX Variable, use ToString for creating the string xml nodes
type WiXVariable = 
    {
        Id : string
        Overridable : string
        Value : string
    }
    override w.ToString() = "<WixVariable Id=\"" + w.Id + "\" Value=\"" + w.Value + "\" Overridable=\"" + w.Overridable + "\"/>"

/// Default value for WiX Variable
let WiXVariableDefaults = 
    {
        Id = ""
        Overridable = "no"
        Value = ""
    }

/// Parameters for WiX Upgrade
type WiXUpgrade =
    {
        Id: Guid
        UpgradeVersion: string
    }
    override w.ToString() = "<Upgrade Id=\"" + w.Id.ToString("D") + "\">" + w.UpgradeVersion + "</Upgrade>"

/// Default value for WiX Upgrade
let WiXUpgradeDefaults = 
    {
        Id = Guid.Empty
        UpgradeVersion = ""
    }

/// Parameters for WiX Upgrade Version
type WiXUpgradeVersion =
    {
        OnlyDetect : string
        Minimum : string
        Maximum : string
        Property : string
        IncludeMinimum : string
        IncludeMaximum : string
    }
    override w.ToString() = "<UpgradeVersion Minimum=\"" + w.Minimum + "\" OnlyDetect=\"" + w.OnlyDetect + "\" IncludeMinimum=\"" + w.IncludeMinimum + "\" Maximum=\"" + w.Maximum 
                            + "\" IncludeMaximum=\"" + w.IncludeMaximum + "\" Property=\"" + w.Property + "\" />"

/// Default value for WiX Upgrade
let WiXUpgradeVersionDefaults = 
    {
        OnlyDetect = ""
        Minimum = ""
        Maximum = ""
        Property = ""
        IncludeMinimum = ""
        IncludeMaximum = ""
    }

/// Parameters for WiX Major Upgrade
type WiXMajorUpgrade = 
    {
        Schedule : string
        AllowDowngrades : string
        DowngradeErrorMessage : string
    }
    override w.ToString() = "<MajorUpgrade Schedule=\"" + w.Schedule + "\" AllowDowngrades=\"" + w.AllowDowngrades + "\" DowngradeErrorMessage=\"" + w.DowngradeErrorMessage + "\" />"

/// Default value for WiX Major Upgrade
let WiXMajorUpgradeDefaults =
    {
        Schedule = "afterInstallValidate"
        AllowDowngrades = "no"
        DowngradeErrorMessage = ""
    }

/// Generates WiX Template with specified file name (you can prepend location too)
/// You need to run this once every build an then use FillInWiXScript to replace placeholders
/// ## Parameters
///  - `fileName` - Pass desired fileName for your wiXScript file
/// ## Sample
///     generateWiXScript "Setup.wxs"
let generateWiXScript fileName =
    let scriptTemplate = 
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
        <Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">
          <!-- Values will be set by build script, use processTemplates function. UpgradeGuid may never change -->
            
          <!-- Version uses Major.Minor.Build format -->
          <Product
            Id=\"@Product.ProductCode@\"
            Name=\"@Product.ProductName@\"
            Language=\"@Product.Language@\"
            Version=\"@Product.Version@\"
            Manufacturer=\"@Product.Publisher@\"
            UpgradeCode=\"@Product.UpgradeGuid@\"
            >
            
            <!-- Auto Increment Package Id for every release -->
            <Package
              Id=\"*\"
              InstallerVersion=\"200\"
              Compressed=\"yes\"
              Description=\"@Product.Description@\"
              Manufacturer=\"@Product.Publisher@\"
            />

            <!-- Include user interface -->
            @Product.UIRefs@

            <!-- Add various WiXVariables -->
            @Product.Variables@

            <!-- WiX uses media for splitting up files if using CDs for publishing. We make just one. All files will be embedded in it. -->
            <Media Id=\"1\" Cabinet=\"media1.cab\" EmbedCab=\"yes\" />

            <Directory Id=\"TARGETDIR\" Name=\"SourceDir\">
              <Directory Id=\"ProgramFilesFolder\" Name=\"ProgramFiles\">
                <Directory Id=\"PUBLISHERDIR\" Name=\"@Product.Publisher@\">
                  <Directory Id=\"INSTALLDIR\" Name=\"@Product.ProductName@\">
                    @Product.Directories@
                  </Directory>
                </Directory>
              </Directory>
            </Directory>

            @Product.Features@
        
            @Product.MajorUpgrade@

            @Product.Upgrade@

            @Product.CustomActions@

            <InstallExecuteSequence>
              @Product.ActionSequences@
            </InstallExecuteSequence>
          </Product>
        </Wix>"
    WriteStringToFile false fileName scriptTemplate
    
/// Takes path where script files reside and sets all parameters as defined
/// ## Parameters
///  - `wiXPath` - Pass path where your script is located at. Function will search for all Scripts in that location and fill in parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
/// FillInWixScript "" (fun f ->
///                            {f with
///                                ProductCode = WiXProductCode
///                                ProductName = WiXProductName
///                                Description = projectDescription
///                                ProductLanguage = WiXProductLanguage
///                                ProductVersion = WiXProductVersion
///                                ProductPublisher = WixProductPublisher
///                                UpgradeGuid = WixProductUpgradeGuid
///                                UIRefs = uiRef1.ToString() + uiRef2.ToString()
///                                WiXVariables = wiXLicense.ToString()
///                                Directories = directories
///                                BuildNumber = "1.0.0"
///                                Features = rootFeature.ToString()
///                                CustomActions = action1.ToString() + action2.ToString()
///                                ActionSequences = actionExecution1.ToString() + actionExecution2.ToString()
///                            })
let internal FillInWixScript wiXPath setParams =
    let parameters = WiXScriptDefaults |> setParams
    let wixScript = !!("*.wxs" @@ wiXPath)
    let replacements = [
        "@Product.ProductCode@", parameters.ProductCode.ToString("D")
        "@Product.ProductName@", parameters.ProductName
        "@Product.Description@", parameters.Description
        "@Product.UIRefs@", parameters.UIRefs
        "@Product.Language@", parameters.ProductLanguage
        "@Product.Version@", parameters.ProductVersion
        "@Product.Variables@", parameters.WiXVariables
        "@Product.Publisher@", parameters.ProductPublisher
        "@Product.UpgradeGuid@", parameters.UpgradeGuid.ToString("D")
        "@Product.Upgrade@", parameters.Upgrade
        "@Product.MajorUpgrade@", parameters.MajorUpgrade
        "@Product.Directories@", parameters.Directories
        "@Product.Features@", parameters.Features
        "@Product.CustomActions@", parameters.CustomActions
        "@Product.ActionSequences@", parameters.ActionSequences
        "@Build.number@", parameters.BuildNumber]
    processTemplates replacements wixScript
    
/// Generates a feature based on the given parameters, use toString on it when embedding it
/// You can pass other features into InnerContent for making a hierarchy
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let feature = generateFeature (fun f -> 
///                                        {f with  
///                                            Id = "UniqueName"
///                                            Title = "Title which is shown"
///                                            Level = 1 
///                                            Description = "Somewhat longer description" 
///                                            Display = "expand" 
///                                            InnerContent = otherFeature.ToString()
///                                        })
let generateFeature setParams =
    let parameters : WiXFeatureParams = WiXFeatureDefaults |> setParams
    if parameters.Id = "" then 
        failwith "No parameter passed for feature Id!"
    parameters

/// Generates a customAction based on the given parameters, use toString on it when embedding it
/// Be careful to make Id unique. FileKey is a reference to a file Id which you added by using wixDir or wixFile
/// Set impersonate to no if your action needs elevated privileges, you should then also set execute as "deferred"
/// ExeCommand are the parameters passed to your executable
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let action = generateCustomAction (fun f ->
///                                            {f with
///                                                Id = "UniqueActionId"
///                                                FileKey = "fi_5"
///                                                Execute = "deferred"
///                                                Impersonate = "no"
///                                                ExeCommand = "install"
///                                                Return = "check"
///                                            })
let generateCustomAction setParams =
    let parameters : WiXCustomAction = WiXCustomActionDefaults |> setParams
    if parameters.Id = "" then 
        failwith "No parameter passed for feature Id!"
    parameters

/// Generates a custom action execution based on the given parameters, use toString on it when embedding it
/// Condition in sample makes execute only on install
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let actionExecution = generateCustomActionExecution (fun f ->
///                                                                {f with 
///                                                                    ActionId = action.Id
///                                                                    Verb = "After"
///                                                                    Target = "InstallFiles"                                                                        
///                                                                    Condition = "<![CDATA[(&" + feature.Id + " = 3) AND NOT (!" + feature.Id + " = 3)]]>"
///                                                                })
let generateCustomActionExecution setParams =
    let parameters : WiXCustomActionExecution = WixCustomActionExecutionDefaults |> setParams
    if parameters.ActionId = "" then 
        failwith "No parameter passed for action Id!"
    parameters

/// Generates a ui ref based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let UIRef = generateUIRef (fun f ->
///                                    {f with
///                                        Id = "WixUI_Mondo"
///                                    })
let generateUIRef setParams =
    let parameters : WiXUIRef = WiXUIRefDefaults |> setParams
    if parameters.Id = "" then 
        failwith "No parameter passed for action Id!"
    parameters


/// Generates an upgrade based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let upgrade = generateUpgrade (fun f ->
///                                       {f with
///                                          Id = productUpgradeCode
///                                       })
let generateUpgrade setParams =
    let parameters : WiXUpgrade = WiXUpgradeDefaults |> setParams
    if parameters.Id = Guid.Empty then 
        failwith "No parameter passed for action Id!"
    parameters

/// Generates an upgrade version based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let upgradeVersion = generateUpgradeVersion (fun f ->
///                                                     {f with
///                                                        Minimum = productVersion
///                                                        OnlyDetect = "yes"
///                                                     })
let generateUpgradeVersion setParams =
    let parameters : WiXUpgradeVersion = WiXUpgradeVersionDefaults |> setParams
    parameters


/// Generates a major upgrade based on the given parameters, use toString on it when embedding it
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
/// ## Sample
///     let majorUpgradeVersion = generateMajorUpgradeVersion(fun f ->
///                                                     {f with 
///                                                         DowngradeErrorMessage = "A later version is already installed, exiting."
///                                                     })
let generateMajorUpgradeVersion setParams =
    let parameters : WiXMajorUpgrade = WiXMajorUpgradeDefaults |> setParams
    parameters

/// Runs the [Candle tool](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) on the given WiX script with the given parameters
let Candle (parameters : WiXParams) wixScript = 
    traceStartTask "Candle" wixScript
    let fi = fileInfo wixScript
    let wixObj = fi.Directory.FullName @@ sprintf @"%s.wixobj" fi.Name
    let tool = parameters.ToolDirectory @@ "candle.exe"
    let args = 
        sprintf "-out \"%s\" \"%s\" %s" wixObj (wixScript |> FullName) (separated " " parameters.AdditionalCandleArgs)
    tracefn "%s %s" parameters.ToolDirectory args
    if 0 <> ExecProcess (fun info -> 
                info.FileName <- tool
                info.WorkingDirectory <- null
                info.Arguments <- args) parameters.TimeOut
    then failwithf "Candle %s failed." args
    traceEndTask "Candle" wixScript
    wixObj

/// Runs the [Light tool](http://wixtoolset.org/documentation/manual/v3/overview/light.html) on the given WiX script with the given parameters
let Light (parameters : WiXParams) outputFile wixObj = 
    traceStartTask "Light" wixObj
    let tool = parameters.ToolDirectory @@ "light.exe"
    let args = 
        sprintf "\"%s\" -spdb -dcl:high -out \"%s\" %s" (wixObj |> FullName) (outputFile |> FullName) 
            (separated " " parameters.AdditionalLightArgs)
    tracefn "%s %s" parameters.ToolDirectory args
    if 0 <> ExecProcess (fun info -> 
                info.FileName <- tool
                info.WorkingDirectory <- null
                info.Arguments <- args) parameters.TimeOut
    then failwithf "Light %s failed." args
    traceEndTask "Light" wixObj

/// Uses the WiX tools [Candle](http://wixtoolset.org/documentation/manual/v3/overview/candle.html) and [Light](http://wixtoolset.org/documentation/manual/v3/overview/light.html) to create an msi.
/// ## Parameters
///  - `setParams` - Function used to manipulate the WiX default parameters.
///  - `outputFile` - The msi output file path (given to Light).
///  - `wixScript` - The path to a WiX script that will be used with Candle.
///
/// ## Sample
///     Target "BuildSetup" (fun _ ->
///         // Copy all important files to the deploy directory
///         !! (buildDir + "/**/*.dll")
///           ++ (buildDir + "/**/*.exe")
///           ++ (buildDir + "/**/*.config")
///           |> Copy deployPrepDir 
///    
///         // replace tags in a template file in order to generate a WiX script
///         let ALLFILES = fun _ -> true
///     
///         let replacements = [
///             "@build.number@",if not isLocalBuild then buildVersion else "0.1.0.0"
///             "@product.productcode@",System.Guid.NewGuid().ToString()
///             "@HelpFiles@",getFilesAsWiXString helpFiles
///             "@ScriptFiles@",getFilesAsWiXString scriptFiles
///             "@icons@",wixDir ALLFILES true (directoryInfo(bundledDir @@ "icons"))]
///         
///         processTemplates replacements setupFiles
///     
///         // run the WiX tools
///         WiX (fun p -> {p with ToolDirectory = WiXPath}) 
///             setupFileName
///             (setupBuildDir + "Setup.wxs.template")
///     )
let WiX setParams outputFile wixScript = 
    let parameters = setParams WiXDefaults
    wixScript
    |> Candle parameters
    |> Light parameters outputFile
